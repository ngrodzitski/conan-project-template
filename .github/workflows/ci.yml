# See runners details:
# https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners#preinstalled-software

name: CI

on:
  push:
    branches: ["main", "dev-0.1", "dev-0.2"]
  pull_request:

jobs:
  Library-stub:
    name: "Ubuntu-22.04 (header-only: ${{ matrix.header_only }}, corporate_tag: ${{ matrix.corporate_tag }}, profile: ${{ matrix.conan_profile }})"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        conan_profile:
          - ubu-gcc-9
          - ubu-clang-15
        header_only:
          - True
          - False
        corporate_tag:
          - ""
          - "kola"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Prepare env
        shell: bash
        run: |
          sudo apt-get -qy install \
            libc++-15-dev libc++abi-15-dev llvm-15
          pip install --user conan==2.* conan-package-tools PrettyTable Cheetah3
          conan profile detect
          conan config install ./conan -sf profiles -tf profiles

      - name: Construct generator args (base)
        shell: bash
        run: |
            echo "--dir-path ./_project --name super_xyz --camel-name SuperXyz --project-type lib" >> genargs

      - name: Construct generator args (header)
        if: ${{ matrix.header_only }}
        shell: bash
        run: |
            echo "--header-only" >> genargs

      - name: Construct generator args (corporate tag)
        if: ${{ matrix.corporate_tag != '' }}
        shell: bash
        run: |
            echo "--corporate-tag ${{ matrix.corporate_tag }}" >> genargs

      - name: Generate
        shell: bash
        run: |
          cat genargs
          xargs -a genargs python project_generator.py
          cp -r `pwd`/cmake-scripts/ _project/cmake-scripts

      - name: Run conan install
        shell: bash
        working-directory: ./_project
        run: |
          conan install . \
             -pr:a ${{ matrix.conan_profile }} \
             --build missing \
             -of _build

      - name: Cmake configure
        shell: bash
        working-directory: ./_project
        run: |
          source ./_build/conanbuild.sh
          cmake -B_build . -DCMAKE_TOOLCHAIN_FILE=_build/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release

      - name: Cmake build
        shell: bash
        working-directory: ./_project
        run: |
          cmake --build _build -j $(nproc) --verbose

      - name: Run ctest
        shell: bash
        working-directory: ./_project
        run: |
          ctest -T test --test-dir _build

      - name: Run install
        shell: bash
        working-directory: ./_project
        run: |
          cmake --install _build/ --prefix _install

      - name: Create conan package
        shell: bash
        working-directory: ./_project
        run: |
          conan create . \
            -pr:a ${{ matrix.conan_profile }} \
            --build missing

  Application-stub:
    name: "Ubuntu-22.04 (header-only: ${{ matrix.header_only }}, corporate_tag: ${{ matrix.corporate_tag }}, conan_profile: ${{ matrix.conan_profile }})"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        conan_profile:
          - ubu-gcc-9
          - ubu-gcc-12
          - ubu-clang-13
          - ubu-clang-15
        corporate_tag:
          - ""
          - "kola"
          - "grdz::kola"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      - name: Prepare env
        shell: bash
        run: |
          sudo apt-get -qy install \
            libc++-15-dev libc++abi-15-dev llvm-15
          pip install --user conan==2.* conan-package-tools PrettyTable Cheetah3
          conan profile detect
          conan config install ./conan -sf profiles -tf profiles

      - name: Construct generator args (base)
        shell: bash
        run: |
            echo "--dir-path ./_project --name super_xyz --camel-name SuperXyz --project-type app" >> genargs

      - name: Construct generator args (corporate tag)
        if: ${{ matrix.corporate_tag != '' }}
        shell: bash
        run: |
            echo "--corporate-tag ${{ matrix.corporate_tag }}" >> genargs

      - name: Generate
        shell: bash
        run: |
          cat genargs
          xargs -a genargs python project_generator.py
          cp -r `pwd`/cmake-scripts/ _project/cmake-scripts

      - name: Run conan install
        shell: bash
        working-directory: ./_project
        run: |
          conan install . \
             -pr:a ${{ matrix.conan_profile }} \
             --build missing \
             -of _build

      - name: Cmake configure
        shell: bash
        working-directory: ./_project
        run: |
          source ./_build/conanbuild.sh
          cmake -B_build . -DCMAKE_TOOLCHAIN_FILE=_build/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release

      - name: Cmake build
        shell: bash
        working-directory: ./_project
        run: |
          cmake --build _build -j $(nproc)

      - name: Run ctest
        shell: bash
        working-directory: ./_project
        run: |
          ctest -T test --test-dir _build

      - name: Run install
        shell: bash
        working-directory: ./_project
        run: |
          cmake --install _build/ --prefix _install
